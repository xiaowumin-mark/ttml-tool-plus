// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

export class CommitItem {
    /**
     * Creates a new CommitItem instance.
     * @param {Partial<CommitItem>} [$$source = {}] - The source object to create the CommitItem.
     */
    constructor($$source = {}) {
        if (!("sha" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["sha"] = "";
        }
        if (!("node_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["node_id"] = "";
        }
        if (!("commit" in $$source)) {
            /**
             * @member
             * @type {{"author": {"name": string, "email": string, "date": string}, "committer": {"name": string, "email": string, "date": string}, "message": string, "tree": {"sha": string, "url": string}, "url": string, "comments_url": string, "verification": {"verified": boolean, "reason": string, "signature": string, "payload": string, "verified_at": string}}}
             */
            this["commit"] = {"author": {"name": "", "email": "", "date": ""}, "committer": {"name": "", "email": "", "date": ""}, "message": "", "tree": {"sha": "", "url": ""}, "url": "", "comments_url": "", "verification": {"verified": false, "reason": "", "signature": "", "payload": "", "verified_at": ""}};
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("html_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["html_url"] = "";
        }
        if (!("comments_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["comments_url"] = "";
        }
        if (!("author" in $$source)) {
            /**
             * @member
             * @type {User | null}
             */
            this["author"] = null;
        }
        if (!("committer" in $$source)) {
            /**
             * @member
             * @type {User | null}
             */
            this["committer"] = null;
        }
        if (!("parents" in $$source)) {
            /**
             * @member
             * @type {{"sha": string, "url": string, "html_url": string}[]}
             */
            this["parents"] = [];
        }
        if (!("files" in $$source)) {
            /**
             * @member
             * @type {CommitItemFile[]}
             */
            this["files"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CommitItem instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {CommitItem}
     */
    static createFrom($$source = {}) {
        const $$createField6_0 = $$createType1;
        const $$createField7_0 = $$createType1;
        const $$createField8_0 = $$createType2;
        const $$createField9_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("author" in $$parsedSource) {
            $$parsedSource["author"] = $$createField6_0($$parsedSource["author"]);
        }
        if ("committer" in $$parsedSource) {
            $$parsedSource["committer"] = $$createField7_0($$parsedSource["committer"]);
        }
        if ("parents" in $$parsedSource) {
            $$parsedSource["parents"] = $$createField8_0($$parsedSource["parents"]);
        }
        if ("files" in $$parsedSource) {
            $$parsedSource["files"] = $$createField9_0($$parsedSource["files"]);
        }
        return new CommitItem(/** @type {Partial<CommitItem>} */($$parsedSource));
    }
}

export class CommitItemFile {
    /**
     * Creates a new CommitItemFile instance.
     * @param {Partial<CommitItemFile>} [$$source = {}] - The source object to create the CommitItemFile.
     */
    constructor($$source = {}) {
        if (!("sha" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["sha"] = "";
        }
        if (!("filename" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["filename"] = "";
        }
        if (!("additions" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["additions"] = 0;
        }
        if (!("deletions" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["deletions"] = 0;
        }
        if (!("changes" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["changes"] = 0;
        }
        if (!("blob_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["blob_url"] = "";
        }
        if (!("raw_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["raw_url"] = "";
        }
        if (!("contents_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["contents_url"] = "";
        }
        if (!("patch" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["patch"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CommitItemFile instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {CommitItemFile}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new CommitItemFile(/** @type {Partial<CommitItemFile>} */($$parsedSource));
    }
}

export class IsuessItem {
    /**
     * Creates a new IsuessItem instance.
     * @param {Partial<IsuessItem>} [$$source = {}] - The source object to create the IsuessItem.
     */
    constructor($$source = {}) {
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("repository_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["repository_url"] = "";
        }
        if (!("labels_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["labels_url"] = "";
        }
        if (!("comments_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["comments_url"] = "";
        }
        if (!("events_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["events_url"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("node_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["node_id"] = "";
        }
        if (!("number" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["number"] = 0;
        }
        if (!("title" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["title"] = "";
        }
        if (!("user" in $$source)) {
            /**
             * @member
             * @type {User | null}
             */
            this["user"] = null;
        }
        if (!("labels" in $$source)) {
            /**
             * @member
             * @type {(Label | null)[]}
             */
            this["labels"] = [];
        }
        if (!("state" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["state"] = "";
        }
        if (!("assignee" in $$source)) {
            /**
             * @member
             * @type {User | null}
             */
            this["assignee"] = null;
        }
        if (!("assignees" in $$source)) {
            /**
             * @member
             * @type {(User | null)[]}
             */
            this["assignees"] = [];
        }
        if (!("locked" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["locked"] = false;
        }
        if (!("comments" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["comments"] = 0;
        }
        if (!("created_at" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["created_at"] = "";
        }
        if (!("updated_at" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["updated_at"] = "";
        }
        if (!("closed_at" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["closed_at"] = "";
        }
        if (!("closed_by" in $$source)) {
            /**
             * @member
             * @type {User | null}
             */
            this["closed_by"] = null;
        }
        if (!("body" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["body"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new IsuessItem instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {IsuessItem}
     */
    static createFrom($$source = {}) {
        const $$createField9_0 = $$createType1;
        const $$createField10_0 = $$createType7;
        const $$createField12_0 = $$createType1;
        const $$createField13_0 = $$createType8;
        const $$createField19_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("user" in $$parsedSource) {
            $$parsedSource["user"] = $$createField9_0($$parsedSource["user"]);
        }
        if ("labels" in $$parsedSource) {
            $$parsedSource["labels"] = $$createField10_0($$parsedSource["labels"]);
        }
        if ("assignee" in $$parsedSource) {
            $$parsedSource["assignee"] = $$createField12_0($$parsedSource["assignee"]);
        }
        if ("assignees" in $$parsedSource) {
            $$parsedSource["assignees"] = $$createField13_0($$parsedSource["assignees"]);
        }
        if ("closed_by" in $$parsedSource) {
            $$parsedSource["closed_by"] = $$createField19_0($$parsedSource["closed_by"]);
        }
        return new IsuessItem(/** @type {Partial<IsuessItem>} */($$parsedSource));
    }
}

export class Label {
    /**
     * Creates a new Label instance.
     * @param {Partial<Label>} [$$source = {}] - The source object to create the Label.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("node_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["node_id"] = "";
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("description" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("color" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["color"] = "";
        }
        if (!("default" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["default"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Label instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Label}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Label(/** @type {Partial<Label>} */($$parsedSource));
    }
}

export class License {
    /**
     * Creates a new License instance.
     * @param {Partial<License>} [$$source = {}] - The source object to create the License.
     */
    constructor($$source = {}) {
        if (!("key" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["key"] = "";
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("spdx_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["spdx_id"] = "";
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("node_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["node_id"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new License instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {License}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new License(/** @type {Partial<License>} */($$parsedSource));
    }
}

export class RepoItem {
    /**
     * Creates a new RepoItem instance.
     * @param {Partial<RepoItem>} [$$source = {}] - The source object to create the RepoItem.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("node_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["node_id"] = "";
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("full_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["full_name"] = "";
        }
        if (!("private" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["private"] = false;
        }
        if (!("owner" in $$source)) {
            /**
             * @member
             * @type {User | null}
             */
            this["owner"] = null;
        }
        if (!("html_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["html_url"] = "";
        }
        if (!("description" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("fork" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["fork"] = false;
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("created_at" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["created_at"] = "";
        }
        if (!("updated_at" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["updated_at"] = "";
        }
        if (!("pushed_at" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["pushed_at"] = "";
        }
        if (!("git_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["git_url"] = "";
        }
        if (!("ssh_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["ssh_url"] = "";
        }
        if (!("clone_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["clone_url"] = "";
        }
        if (!("svn_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["svn_url"] = "";
        }
        if (!("homepage" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["homepage"] = "";
        }
        if (!("size" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["size"] = 0;
        }
        if (!("stargazers_count" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["stargazers_count"] = 0;
        }
        if (!("watchers_count" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["watchers_count"] = 0;
        }
        if (!("language" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["language"] = "";
        }
        if (!("has_issues" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["has_issues"] = false;
        }
        if (!("has_projects" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["has_projects"] = false;
        }
        if (!("has_downloads" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["has_downloads"] = false;
        }
        if (!("has_wiki" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["has_wiki"] = false;
        }
        if (!("has_pages" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["has_pages"] = false;
        }
        if (!("has_discussions" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["has_discussions"] = false;
        }
        if (!("forks_count" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["forks_count"] = 0;
        }
        if (!("mirror_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["mirror_url"] = "";
        }
        if (!("archived" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["archived"] = false;
        }
        if (!("disabled" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["disabled"] = false;
        }
        if (!("open_issues_count" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["open_issues_count"] = 0;
        }
        if (!("license" in $$source)) {
            /**
             * @member
             * @type {License | null}
             */
            this["license"] = null;
        }
        if (!("allow_forking" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["allow_forking"] = false;
        }
        if (!("is_template" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["is_template"] = false;
        }
        if (!("web_commit_signoff_required" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["web_commit_signoff_required"] = false;
        }
        if (!("topics" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["topics"] = [];
        }
        if (!("visibility" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["visibility"] = "";
        }
        if (!("forks" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["forks"] = 0;
        }
        if (!("open_issues" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["open_issues"] = 0;
        }
        if (!("watchers" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["watchers"] = 0;
        }
        if (!("default_branch" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["default_branch"] = "";
        }
        if (!("temp_clone_token" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["temp_clone_token"] = "";
        }
        if (!("network_count" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["network_count"] = 0;
        }
        if (!("subscribers_count" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["subscribers_count"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RepoItem instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {RepoItem}
     */
    static createFrom($$source = {}) {
        const $$createField5_0 = $$createType1;
        const $$createField33_0 = $$createType10;
        const $$createField37_0 = $$createType11;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("owner" in $$parsedSource) {
            $$parsedSource["owner"] = $$createField5_0($$parsedSource["owner"]);
        }
        if ("license" in $$parsedSource) {
            $$parsedSource["license"] = $$createField33_0($$parsedSource["license"]);
        }
        if ("topics" in $$parsedSource) {
            $$parsedSource["topics"] = $$createField37_0($$parsedSource["topics"]);
        }
        return new RepoItem(/** @type {Partial<RepoItem>} */($$parsedSource));
    }
}

export class User {
    /**
     * Creates a new User instance.
     * @param {Partial<User>} [$$source = {}] - The source object to create the User.
     */
    constructor($$source = {}) {
        if (!("login" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["login"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("node_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["node_id"] = "";
        }
        if (!("avatar_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["avatar_url"] = "";
        }
        if (!("gravatar_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["gravatar_id"] = "";
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("html_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["html_url"] = "";
        }
        if (!("followers_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["followers_url"] = "";
        }
        if (!("following_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["following_url"] = "";
        }
        if (!("gists_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["gists_url"] = "";
        }
        if (!("starred_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["starred_url"] = "";
        }
        if (!("subscriptions_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["subscriptions_url"] = "";
        }
        if (!("organizations_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["organizations_url"] = "";
        }
        if (!("repos_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["repos_url"] = "";
        }
        if (!("events_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["events_url"] = "";
        }
        if (!("received_events_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["received_events_url"] = "";
        }
        if (!("type" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["type"] = "";
        }
        if (!("user_view_type" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["user_view_type"] = "";
        }
        if (!("site_admin" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["site_admin"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new User instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {User}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new User(/** @type {Partial<User>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = User.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($Create.Any);
const $$createType3 = CommitItemFile.createFrom;
const $$createType4 = $Create.Array($$createType3);
const $$createType5 = Label.createFrom;
const $$createType6 = $Create.Nullable($$createType5);
const $$createType7 = $Create.Array($$createType6);
const $$createType8 = $Create.Array($$createType1);
const $$createType9 = License.createFrom;
const $$createType10 = $Create.Nullable($$createType9);
const $$createType11 = $Create.Array($Create.Any);
